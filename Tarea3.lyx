#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Tarea N°3
\end_layout

\begin_layout Title
Patrones de Diseño
\end_layout

\begin_layout Author
Adrian Gutierrez Gil Miguel Marabolí Méndez Valery Soto Lastra
\end_layout

\begin_layout Date
06-12-2013
\end_layout

\begin_layout Section
Patrones de Diseño
\end_layout

\begin_layout Standard
Los patrones de diseño, son la base para la búsqueda de soluciones a problemas
 comunes en el desarrollo de software y a otros ámbitos referentes al diseño
 de interacción o interfaces.
 Un patrón de diseño resulta ser una solución a un problema de diseño.
 Para que una solución sea considerada, un patrón debe poseer ciertas caracterís
ticas, una de ellas es que debe haber comprobado su efectividad resolviendo
 problemas similares en ocasiones anteriores.
 Otra es que debe ser reutilizable, lo que significa que es aplicable a
 diferentes problemas de diseño en distintas circunstancias.
 
\end_layout

\begin_layout Standard
Actualmente las características del software son que sea facil de usar,
 que tenga variadas funcionalidades y que tenga una atractiva interfaz de
 usuario.
 Por lo tanto, es realmente necesario tener un patrón de como diseñar.
\end_layout

\begin_layout Standard
Los principios del diseño tienen su origen en la teoría, la experiencia
 y el sentido común.
 Algunos descritos por Don Norman (1998) son:
\end_layout

\begin_layout Itemize
Visibilidad: Si las funciones son visibles, serán usadas.
\end_layout

\begin_layout Itemize
Retroalimentación: El principio de acción y reacción.
  
\end_layout

\begin_layout Itemize
Restricciones: Limitaciones en la interacción con el usuario, de manera
 que pueden ser físicas, lógicas o culturales.
 
\end_layout

\begin_layout Itemize
Mapeo: Relación entre los controles y sus efectos.
 
\end_layout

\begin_layout Itemize
Consistencia: Diseño basado en elementos similares.
 
\end_layout

\begin_layout Itemize
Claridad: Entender cómo usar el diseño, puede ser real o percibida.
\end_layout

\begin_layout Standard
Los objetivos de los patrones de diseño son reutilizar elementos del diseño
 de software, no crear cosas que ya están hechas, tener un idioma común
 entre desarrolladores, estandarizar el modo de diseñar software y facilitar
 el aprendizaje para las generaciones venideras.
 
\end_layout

\begin_layout Standard
Tipos de patrones: 
\end_layout

\begin_layout Standard
• Patrones Creacionales: Object Pool – Abstract Factory – Builder – Factory
 Method – Prototype – Singleton.
 
\end_layout

\begin_layout Itemize
Patrones Estructurales: Adapter o Wrapper – Bridge – Composite – Decorator
 – Facade – Flyweight – Proxy – Modulo.
 
\end_layout

\begin_layout Itemize
Patrones Comportamiento: Chain of Responsibility – Command – Interpreter
 – Iterator – Mediator – Memento – Observer – State – Strategy – Template
 Method – Visitor.
 
\end_layout

\begin_layout Itemize
Patrones Interacción: El primer intento por aplicar este concepto en el
 diseño de las interfaces de usuario se dio por Ward Cummingham y Kent Beck
 quienes adaptaron la propuesta de C.
 Alexander y crearon cinco patrones de interfaz: Window per task, Few panes,
 Standard panes, Nouns and verbs, y Short Menu.
 Los patrones de interacción buscan la reutilización de interfaces eficaces
 y un manejo óptimo de los recursos de las páginas web, haciendo más eficaz
 el consumo de tiempo en el diseño del sitio web y permitiendo a los programador
es novatos adquirir más experiencia.
 
\end_layout

\begin_layout Section
Modelo Vista Controlador (MVC)
\end_layout

\begin_layout Standard
Es una patrón de diseño en arquitectura de software, donde su particularidad
 es separar los datos y los procedimientos de la interfaz del usuario en
 una aplicación de software.
 Con la ayuda de tres elementos distintos, que son definidos como Modelo
 (Objeto de Negocio), la Vista (Interfaz de Usuario) y el Controlador (Controlad
or del workflow de la aplicación) , estos componentes interactúan entre
 si con un flujo de datos constante administrados por el controlador del
 sistema.
\end_layout

\begin_layout Standard
Los componentes del patrón se pueden definir de la siguiente manera:
\end_layout

\begin_layout Standard
Modelo: Es la representación de la información del sistema, por lo que es
 quien administra el acceso a dichos datos, opera junto a la lógica de negocio
 y este es quien recibe la información entregada por el modelo.
 Y también envía a la vista la información solicitada pro esta para ser
 desplegada en ella..
 Pero toda solicitud de acceso y manipulación a esta información del sistema
 se realiza a través del controlador.
 
\end_layout

\begin_layout Standard
Vista: Es la parte de la aplicación que representa la información solicitada
 en el modelo de forma adecuada a la necesidad del usuario, el cual interactúa
 con ella (es conocido como la interfaz de usuario), por lo que este sistema
 funciona como la mayor parte del tiempo en la salida del sistema.
\end_layout

\begin_layout Standard
Controlador: Es el sector donde el sistema responde a los eventos (generados
 por el usuario), y realiza las peticiones al modelo cuando se necesario.
 También interactúa con la vista cuando esta necesita realizar una petición
 al modelo como representante de este, es por quien también administra todo
 flujo de información en el sistema.
 Es la parte fundamental del sistema por donde se establecen todos los procesos
 necesarios para realizar las interacciones de las distintas partes del
 sistema.
\end_layout

\begin_layout Standard
Algunas de las ventajas de implementar este tipo de patrón de diseño son:
\end_layout

\begin_layout Itemize
Facilita la evolución de la evolución de la lógica de Negocio y la Interfaz
 del Usuario 
\end_layout

\begin_layout Itemize
Incrementa la reutilización y la flexibilidad 
\end_layout

\begin_layout Itemize
Permite encapsular los datos y sus procesos de la Interfaz.
 
\end_layout

\begin_layout Section
Ejemplo
\end_layout

\begin_layout Standard
El Modelo MVC separa el programa en 3 secciones Modelo, Vista y Controlador,
 este ultimo es el encargado de establecer una conecion entre la Vista(lo
 que el usuario ve en la pantalla) y el Modelo(donde se lee o se guarda
 la informacion).
\end_layout

\begin_layout Standard
Esto perimite que el codigo sea mas mantenible, ya que se puede modificar
 cualquiera de las secciones sin afectar a las demas.
\end_layout

\begin_layout Section
Anexos
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Repositorio"
target "https://github.com/ingmamm/tarea3Ayudantia"

\end_inset


\end_layout

\end_body
\end_document
